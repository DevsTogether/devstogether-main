generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String            @id @default(cuid())
  name            String?
  username        String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  bio             String?
  reputation      Int?              @default(0)
  helpedUsers     Int?              @default(0)
  restrictions    Json?
  createdAt       DateTime?         @default(now())
  banned          Boolean?          @default(false)
  active          Boolean?          @default(true)
  specialization  String?
  accounts        Account[]
  sessions        Session[]
  level           Level?            @relation(fields: [levelId], references: [id]) 
  role            Role?             @relation(fields: [roleId], references: [id])
  levelId         Int               @default(1)
  roleId          Int               @default(3)
  languages       UserLanguage[]
  medals          UserMedal[]
  integrations    Integration[]
  Questions       Question[]
  Reports         Report[]
  Comments        Comment[]
  Call            Call[]
  CallParticipant CallParticipant[]
  Vote            Vote[]
}

model Role {
  id    Int    @id @unique @default(autoincrement())
  name  String
  roles Json?
  User  User[]
}

model Level {
  id                 Int     @id @unique @default(autoincrement())
  name               String?
  reputationRequired Int?
  User               User[]
}

model Language {
  id           Int            @id @unique @default(autoincrement())
  name         String
  UserLanguage UserLanguage[]
}

model UserLanguage {
  id         Int      @unique @default(autoincrement())
  User       User     @relation(fields: [userId], references: [id])
  userId     String
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  @@id([id, userId, languageId])
}

model Medal {
  id        Int         @id @unique @default(autoincrement())
  name      String?
  details   String?
  type      String?
  UserMedal UserMedal[]
}

model UserMedal {
  id         Int       @id @unique @default(autoincrement())
  User       User      @relation(fields: [userId], references: [id])
  userId     String
  medal      Medal     @relation(fields: [medalId], references: [id])
  medalId    Int
  obtainedAt DateTime?
}

model Integration {
  id              String @id @unique @default(cuid())
  integrationData Json?
  User            User   @relation(fields: [userId], references: [id])
  userId          String
}

model Question {
  id        String        @id @unique @default(cuid())
  title     String
  content   String
  visits    Int           @default(0)
  reward    Int?
  type      String?       @default("default")
  tags      QuestionTag[] 
  createdAt DateTime?     @default(now())
  updatedAt DateTime?
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?
  Comment   Comment[]
  Responses Response[]
  Call      Call[]
  Vote      Vote[]
}

model Vote {
  id         String    @unique @default(cuid())
  point      Int?
  User       User      @relation(fields: [userId], references: [id])
  userId     String
  Question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  Response   Response? @relation(fields: [responseId], references: [id])
  responseId String?
  createdAt  DateTime? @default(now())

  @@id([id, userId])
}

model Response {
  id         String    @id @unique @default(cuid())
  content    String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?
  comments   Comment[]
  Question   Question  @relation(fields: [questionId], references: [id])
  questionId String
  Vote       Vote[]
}

model Tag {
  id          Int           @id @unique @default(autoincrement())
  name        String        @unique
  about       String?
  QuestionTag QuestionTag[]
}

model QuestionTag {
  id         Int       @id @unique @default(autoincrement())
  tag        Tag?      @relation(fields: [tagId], references: [id])
  tagId      Int?
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
}

model Report {
  id             String  @id @unique @default(cuid())
  User           User?   @relation(fields: [userId], references: [id])
  userId         String? 
  userReportedId String?
  origin         String?
  reason         String?
  details        String?
}

model Comment {
  id         String    @id @unique @default(cuid())
  User       User?     @relation(fields: [userId], references: [id])
  Response   Response? @relation(fields: [responseId], references: [id])
  Question   Question? @relation(fields: [questionId], references: [id])
  userId     String?
  responseId String?
  questionId String?
  content    String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?
}

model Call {
  id              String            @id @unique @default(cuid())
  start           DateTime?
  ending          DateTime?
  expires         DateTime?
  isOpen          Boolean           @default(false)
  question        Question?         @relation(fields: [questionId], references: [id])
  questionId      String?
  userId          String
  User            User              @relation(fields: [userId], references: [id])
  CallParticipant CallParticipant[]
}

model CallParticipant {
  id     String  @id @unique @default(cuid())
  Call   Call?   @relation(fields: [callId], references: [id])
  callId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
